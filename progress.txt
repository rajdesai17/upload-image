# Project Status Summary: SSO Image Upload

## What We Have Done

- Set up a React frontend for users to select and upload profile images.
- Built a Node.js backend (Express) with an `/upload-profile-image` endpoint.
- The frontend sends the selected image and an access token to the backend.
- The backend now forwards the uploaded file and Authorization token to the real SSO API (`PATCH https://devauth.formidium.com/api/v1/user/uploadProfileImage`).
- The backend handles SSO API responses, errors, and cleans up local files after forwarding.
- Detailed error logging is implemented in the backend for easier debugging.
- The frontend displays clear status messages for success and error states, and validates file type and size before upload.

## How It Works Now

1. User selects an image in the React app.
2. The app sends the image (with a token) to the backend.
3. The backend forwards the image and token to the real SSO API.
4. The backend returns the SSO API response to the frontend.
5. The frontend displays the real result or error message.

## What To Do Next

1. **Testing:**
   - Start both servers.
   - Upload an image and confirm the SSO API returns a real file path.
   - Handle and display any errors (e.g., invalid/expired token).
   - Check backend logs for detailed error info if issues occur.
2. **Edge Cases & Improvements:**
   - Handle expired/invalid tokens (401 errors) and prompt user to re-authenticate or refresh token.
   - Optionally, implement automatic token refresh using the `/api/v1/refreshAccessToken` endpoint.
   - Further improve user feedback and error handling as needed.

## References

- See `overview.txt` for full setup and code samples.
- SSO API docs: `/api/v1/user/uploadProfileImage` (PATCH, multipart/form-data, Authorization required).
- Token refresh docs: `/api/v1/refreshAccessToken` (POST, JSON body with `refreshToken`).
